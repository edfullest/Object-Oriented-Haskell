module ExpressionCodeGen where
import Data.Decimal
import DataTypes
import Quadruple
import SymbolTable
import ClassSymbolTable
import Expression
import Text.Show.Pretty
import qualified Data.HashMap.Strict as Map
import Data.List (intercalate, maximumBy)
import Data.Ord (comparing)

processStart :: Scope -> SymbolTable -> ClassSymbolTable -> ConstantAddressMap -> IdentifierAddressMap -> LiteralCounters -> QuadNum -> Expression -> (LiteralCounters,[Quadruple],QuadNum)
processStart scp symTab classSymTab constaddressMap idaddressMap (intLitC, decLitC, strLitC, boolLitC) quadNum (ExpressionLitVar (DecimalLiteral dec)) = case (Map.lookup ("<dec>" ++ (show (dec))) constaddressMap) of
                                                                                                                                                            Just addressCons -> case (Map.lookup ("<int>0") constaddressMap) of
                                                                                                                                                                                    Just address -> ((intLitC, decLitC + 1, strLitC, boolLitC), [(buildQuadrupleThreeAddresses quadNum ADD_ (address, addressCons, (decLitC + 1)))], quadNum + 1)  
processStart scp symTab classSymTab constaddressMap idaddressMap (intLitC, decLitC, strLitC, boolLitC) quadNum (ExpressionLitVar (IntegerLiteral int)) = case (Map.lookup ("<int>" ++ (show (int))) constaddressMap) of
                                                                                                                                                            Just addressCons -> case (Map.lookup ("<int>0") constaddressMap) of
                                                                                                                                                                                    Just address -> ((intLitC + 1, decLitC, strLitC, boolLitC), [(buildQuadrupleThreeAddresses quadNum ADD_ (address, addressCons, (intLitC + 1)))], quadNum + 1) 
processStart scp symTab classSymTab constaddressMap idaddressMap (intLitC, decLitC, strLitC, boolLitC) quadNum (ExpressionLitVar (StringLiteral str)) = case (Map.lookup ("<str>" ++ (show (str))) constaddressMap) of
                                                                                                                                                            Just addressCons -> case (Map.lookup ("<str>") constaddressMap) of
                                                                                                                                                                                    Just address -> ((intLitC, decLitC, strLitC + 1, boolLitC), [(buildQuadrupleThreeAddresses quadNum ADD_ (address, addressCons, (strLitC + 1)))], quadNum + 1) 
processStart scp symTab classSymTab constaddressMap idaddressMap (intLitC, decLitC, strLitC, boolLitC) quadNum (ExpressionLitVar (BoolLiteral bool)) = case (Map.lookup ("<bool>" ++ (show (bool))) constaddressMap) of
                                                                                                                                                            Just addressCons -> case (Map.lookup ("<bool>True") constaddressMap) of
                                                                                                                                                                                    Just address -> ((intLitC, decLitC, strLitC, boolLitC + 1), [(buildQuadrupleThreeAddresses quadNum EQ_ (address, addressCons, (boolLitC + 1)))], quadNum + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap (intLitC, decLitC, strLitC, boolLitC) quadNum (ExpressionLitVar (VarIdentifier id)) = case (checkDataTypeOfLitVar scp (VarIdentifier id) symTab) of
                                                                                                                                                        Just PrimitiveDouble -> case (Map.lookup (show (id)) idaddressMap) of
                                                                                                                                                                                    Just addressCons -> case (Map.lookup ("<int>0") constaddressMap) of
                                                                                                                                                                                                            Just address -> ((intLitC, decLitC + 1, strLitC, boolLitC), [(buildQuadrupleThreeAddresses quadNum ADD_ (address, addressCons, (decLitC + 1)))], quadNum + 1)  
                                                                                                                                        
                                                                                                                                                        Just PrimitiveInt -> case (Map.lookup (show (id)) idaddressMap) of
                                                                                                                                                                                    Just addressCons -> case (Map.lookup ("<int>0") constaddressMap) of
                                                                                                                                                                                                            Just address -> ((intLitC + 1, decLitC, strLitC, boolLitC), [(buildQuadrupleThreeAddresses quadNum ADD_ (address, addressCons, (intLitC + 1)))], quadNum + 1) 
                                                                                                                                                        Just PrimitiveInteger -> case (Map.lookup (show (id)) idaddressMap) of
                                                                                                                                                                                    Just addressCons -> case (Map.lookup ("<int>0") constaddressMap) of
                                                                                                                                                                                                            Just address -> ((intLitC + 1, decLitC, strLitC, boolLitC), [(buildQuadrupleThreeAddresses quadNum ADD_ (address, addressCons, (intLitC + 1)))], quadNum + 1)
                                                                                                                                                        Just PrimitiveString -> case (Map.lookup (show (id)) idaddressMap) of
                                                                                                                                                                                    Just addressCons -> case (Map.lookup ("<str>") constaddressMap) of
                                                                                                                                                                                                            Just address -> ((intLitC, decLitC, strLitC + 1, boolLitC), [(buildQuadrupleThreeAddresses quadNum ADD_ (address, addressCons, (strLitC + 1)))], quadNum + 1)
                                                                                                                                                        Just PrimitiveBool -> case (Map.lookup (show (id)) idaddressMap) of
                                                                                                                                                                                    Just addressCons -> case (Map.lookup ("<bool>True") constaddressMap) of
                                                                                                                                                                                                            Just address -> ((intLitC, decLitC, strLitC, boolLitC + 1), [(buildQuadrupleThreeAddresses quadNum ADD_ (address, addressCons, (boolLitC + 1)))], quadNum + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionMult exp1 exp2) = let  typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                    typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                    ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                    ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                    in case (typeExp1) of
                                                                                                                            Just PrimitiveDouble -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveMoney -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveInt -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveInteger -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MULTIPLY_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1) 
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionDiv exp1 exp2) = let   typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                    typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                    ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                    ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                    in case (typeExp1) of
                                                                                                                            Just PrimitiveDouble -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveMoney -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveInt -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveInteger -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum DIVIDE_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)

processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionPow exp1 exp2) = let   typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                    typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                    ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                    ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                    in case (typeExp1) of
                                                                                                                            Just PrimitiveDouble -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveMoney -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveInt -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveInteger -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum POWER_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionPlus exp1 exp2) = let  typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                    typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                    ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                    ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                    in case (typeExp1) of
                                                                                                                            Just PrimitiveDouble -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveMoney -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveInt -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveInteger -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum ADD_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)                                                                                                                  
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionMinus exp1 exp2) = let     typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                        typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                        ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                        ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                            in case (typeExp1) of
                                                                                                                                Just PrimitiveDouble -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                Just PrimitiveMoney -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (decLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (decLitCUpdate, intLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                Just PrimitiveInt -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                Just PrimitiveInteger -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2 + 1, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (intLitCUpdate, decLitCUpdate2, (decLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum SUB_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionPars exp1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionGreater exp1 exp2) = let   typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                        typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                        ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                        ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                            in case (typeExp1) of
                                                                                                                                Just PrimitiveDouble -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                Just PrimitiveMoney -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                Just PrimitiveInt -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                Just PrimitiveInteger -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GT_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionLower exp1 exp2) = let     typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                        typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                        ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                        ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                            in case (typeExp1) of
                                                                                                                                Just PrimitiveDouble -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                Just PrimitiveMoney -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                Just PrimitiveInt -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                Just PrimitiveInteger -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LT_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionGreaterEq exp1 exp2) = let     typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                            typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                            ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                            ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                                in case (typeExp1) of
                                                                                                                                    Just PrimitiveDouble -> case (typeExp2) of
                                                                                                                                                                Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                                Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                                Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                                Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                    Just PrimitiveMoney -> case (typeExp2) of
                                                                                                                                                                Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                                Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                                Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                                Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                    Just PrimitiveInt -> case (typeExp2) of
                                                                                                                                                                Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                                Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                                Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                                Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                    Just PrimitiveInteger -> case (typeExp2) of
                                                                                                                                                                Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                                Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                                Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                                Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum GTEQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionLowerEq exp1 exp2) = let   typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                        typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                        ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                        ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                            in case (typeExp1) of
                                                                                                                                Just PrimitiveDouble -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                Just PrimitiveMoney -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                Just PrimitiveInt -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                                Just PrimitiveInteger -> case (typeExp2) of
                                                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum LTEQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionEqEq exp1 exp2) = let  typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                    typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                    ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                    ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                        in case (typeExp1) of
                                                                                                                            Just PrimitiveDouble -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveMoney -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveInt -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveInteger -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                            Just PrimitiveString -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveString -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (strLitCUpdate, strLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                            Just PrimitiveBool -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveBool -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum EQ_ (boolLitCUpdate, boolLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionNotEq exp1 exp2) = let typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                    typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                    ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                    ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                        in case (typeExp1) of
                                                                                                                            Just PrimitiveDouble -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveMoney -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (decLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (decLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveInt -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveInteger -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveDouble -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveMoney ->  ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (intLitCUpdate, decLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (intLitCUpdate, intLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                            Just PrimitiveString -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveString -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (strLitCUpdate, strLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                            Just PrimitiveBool -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveBool -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum NOTEQ_ (boolLitCUpdate, boolLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionAnd exp1 exp2) = let   typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                    typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                    ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                    ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                        in case (typeExp1) of
                                                                                                                            Just PrimitiveBool -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveBool -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum AND_ (boolLitCUpdate, boolLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionOr exp1 exp2) = let    typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                    typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                    ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                    ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                        in case (typeExp1) of
                                                                                                                            Just PrimitiveBool -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveBool -> ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum OR_ (boolLitCUpdate, boolLitCUpdate2, (boolLitCUpdate2 + 1)))], quadNum2 + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionMod exp1 exp2) = let   typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                    typeExp2 = (expressionProcess scp exp2 symTab classSymTab)
                                                                                                                    ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                    ((intLitCUpdate2, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad2, quadNum2) = processStart scp symTab classSymTab constaddressMap idaddressMap (intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate) quadNum1 exp2
                                                                                                                        in case (typeExp1) of
                                                                                                                            Just PrimitiveInt -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MOD_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MOD_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1) 
                                                                                                                            Just PrimitiveInteger -> case (typeExp2) of
                                                                                                                                                        Just PrimitiveInt -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MOD_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
                                                                                                                                                        Just PrimitiveInteger -> ((intLitCUpdate2 + 1, decLitCUpdate2, strLitCUpdate2, boolLitCUpdate2 + 1), quad1 ++ quad2 ++ [(buildQuadrupleThreeAddresses quadNum MOD_ (intLitCUpdate, intLitCUpdate2, (intLitCUpdate2 + 1)))], quadNum2 + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionNot exp1) = let   ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                in ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate + 1), quad1 ++ [(buildQuadrupleTwoAddresses quadNum NOT_ (boolLitCUpdate, (boolLitCUpdate + 1)))], quadNum1 + 1)
processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum (ExpressionNeg exp1) = let    typeExp1 = (expressionProcess scp exp1 symTab classSymTab)
                                                                                                                ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate),quad1, quadNum1) = processStart scp symTab classSymTab constaddressMap idaddressMap litCount quadNum exp1
                                                                                                                    in case (typeExp1) of
                                                                                                                            Just PrimitiveDouble -> ((intLitCUpdate, decLitCUpdate + 1, strLitCUpdate, boolLitCUpdate), quad1 ++ [(buildQuadrupleTwoAddresses quadNum NEG_ (decLitCUpdate, (decLitCUpdate + 1)))], quadNum + 1)
                                                                                                                            Just PrimitiveMoney -> ((intLitCUpdate, decLitCUpdate + 1, strLitCUpdate, boolLitCUpdate), quad1 ++ [(buildQuadrupleTwoAddresses quadNum NEG_ (decLitCUpdate, (decLitCUpdate + 1)))], quadNum + 1)
                                                                                                                            Just PrimitiveInt ->  ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate + 1), quad1 ++ [(buildQuadrupleTwoAddresses quadNum NEG_ (intLitCUpdate, (intLitCUpdate + 1)))], quadNum + 1)
                                                                                                                            Just PrimitiveInteger -> ((intLitCUpdate, decLitCUpdate, strLitCUpdate, boolLitCUpdate + 1), quad1 ++ [(buildQuadrupleTwoAddresses quadNum NEG_ (intLitCUpdate, (intLitCUpdate + 1)))], quadNum