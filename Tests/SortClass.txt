class Sort{
    // Attributes
    [+] Int [10] arr;

    // Functions
    [-] partition => Int :: Int low -> Int high{
        Int i,j,pivot,temp;
        pivot = arr[high];
        i = low - 1;  // Index of smaller element
        j = low;
        while (j <= (high - 1)){
            if (arr[j] <= pivot){
                i++;
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
            j++;
        }

        temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

    [+] quicksort => Nothing :: Int low -> Int high{
        Int partitionIndex; 
        if (low < high){
            partitionIndex = partition(low, high);
            // Separately sort elements before
            // partition and after partition
            quicksort(low, partitionIndex - 1);
            quicksort(partitionIndex + 1, high);
        }
    }
}

main{
    Int [10] n = [111,4,6,2,1,7,8,10,5,9];
    Int size = 10;
    Sort s;
    s.arr = n;
    displayLn(s.arr);
    s.quicksort(0,size - 1);
    n = s.arr;
    displayLn(s.arr);
}